# $RCSfile$ ($Revision$)
# $Author$ $Date$ 
#
# Windows Makefile Settings -- Other configurations may override these
# settings for variations in platform or package version.
#

#========================================
# RECURSIVE MAKES.  The /X option forces stderr messages to stdout.
# We would like to pass MAKEFLAGS, but this appears to be completely
# broken with the NMAKE from VC 4-6 (and 7?)
#
# The Visual Age nmake uses a syntax that conflicts with batch file
# commands in makefiles.  So for vars must be %%i instead of %i
#
# The windows command to show dynamic libraries is "dumpbin /all"
#
#
WINMAKEFILE	= win32.mak
WINMAKE		= $(MAKE) /nologo /X- /F$(WINMAKEFILE)
FORVAR		= %i


#========================================
# USER RESERVED -- Reserved for users to set on the command line.
# Applications should not set these.  These variables are for C/C++
# compilation, Java compilation, FORTRAN compilation, and linking.
CFLAGS		=
LDFLAGS		=


# OPTIMIZE for speed with /O2.  Show portability and other warnings
# with /W3.  Show potential 64bit problems with -Wp64.  Override this
# from the command line to build debug versions.
#
OPTFLAGS	= /O2 /W3

#========================================
# FILE EXTENSIONS.  The extensions and prefixes for different types of
# files change from platform to platform.  Hide these in macros so
# that we can more easily cut and paste between makefiles.

# Manualy set the suffixes ourselves.
SUFFIXES = \
	.exe .bat .o .obj .c .cxx .cpp .cc \
	.y .Y .l .L .f .r .s .sh .S .ln .h .p \
	.java .class

.SUFFIXES:
.SUFFIXES: $(SUFFIXES)

o		= .obj
EXE_SFX		= .exe
SCRIPT_SFX 	= .bat
LIB_PFX		= 
LIB_SFX		= .lib
LIB_SHARED_SFX	= .dll

# Temporary library
TMPLIB		= temp.lib


#========================================
# FILE TOOLS
#
# Removing files and directories differ on 9x and NT/2k/XP.  The 9x
# versions will sort of work, but the rmdir operation may fail.
#
RM 	= del /f/q
RMDIR 	= rmdir /s/q
NULL=

CP	= copy
MKDIR 	= mkdir
MV	= move
UNZIP 	= unzip
ZIP 	= zip


#========================================
# STATIC LIBRARY Build -- Under windows we use the lib tool, or link
# with the lib option to create static libraries.  Targets should use
# the /out option to specify the output file.
#
LIB32		= link.exe -lib
LIB32_SYSFLAGS	= /nologo

LINK		= link.exe


#========================================
# ANSI C Compile and Link
#
CC		= cl
CC_COMPILE	= $(CC) /c $(OPTFLAGS) $(CFLAGS) $(CC_CFLAGS) $(CC_SYSCFLAGS)
CC_LINK		= $(LINK) $(LDFLAGS) $(CC_LDFLAGS) $(CC_SYSLDFLAGS)
CC_CFLAGS 	=
CC_LDFLAGS	=

# Global system things used for compilation, static linking, etc.
CC_SYSCFLAGS    = /MD /nologo
CC_SYSLDFLAGS 	= /nologo
CC_SYSLIBS	= 


#========================================
# C++ Compile and Link
#
CXX		= cl
CXX_COMPILE	= $(CXX) /c $(OPTFLAGS) $(CFLAGS) $(CXX_CFLAGS) $(CXX_SYSCFLAGS)
CXX_LINK	= $(LINK) $(LDFLAGS) $(CXX_LDFLAGS) $(CXX_SYSLDFLAGS)


# Use INCLUDES as the default value for legacy reasons.  Most of the
# existing makefiles set this.  Remove this once everything is changed
CXX_CFLAGS 	= $(INCLUDES)
CXX_LDFLAGS	=

# The force flags are used for C/C++ compilers that select the
# language based on the file naming conventions.  Some C++ source
# happens to be in files with C naming conventions.
CXX_FORCE	= -Tp

# System things used for compilation.  Things for static linking or
# making sure that the compiler understands that a file is a C++ file
# or whatever.  These are the system flags always needed to compile,
# to link, and extra libraries for the end of the link line.
#
CXX_SYSCFLAGS   = /MD /nologo
CXX_SYSLDFLAGS 	= /nologo 
CXX_SYSLIBS	= kernel32.lib user32.lib advapi32.lib

# Compilation Rules -- Repeat the rules for all of the different
# naming conventions.  Note that .C would appear as .c on a case
# insensitive file system.
#
.cxx.obj:	; $(CXX_COMPILE) $<
.cpp.obj:	; $(CXX_COMPILE) $<
.cc.obj:	; $(CXX_COMPILE) $<

.cxx.exe:	
	$(CXX_COMPILE) $< 
	$(CXX_LINK) /out:$@ $*.obj $(LIBRARIES)

.cpp.exe:	
	$(CXX_COMPILE) $< 
	$(CXX_LINK) /out:$@ $*.obj $(LIBRARIES)

.cc.exe:	
	$(CXX_COMPILE) $< 
	$(CXX_LINK) /out:$@ $*.obj $(LIBRARIES)


# The Microsoft compiler uses filename extensions to auto-detects
# between ANSI C and C++. For the old-style .c convention, we must use
# the -Tp flag to force the compiler to parse as C++
#
.c.obj:		; $(CXX_COMPILE) $(CXX_FORCE) $<
.c.exe:	
	$(CXX_COMPILE) $(CXX_FORCE) $< 
	$(CXX_LINK) /out:$@ $*.obj $(LIBRARIES)


